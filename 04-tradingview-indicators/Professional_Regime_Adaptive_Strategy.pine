//@version=5
indicator("Professional Regime-Adaptive Reversal Strategy", shorttitle="PROF_REV", overlay=true, max_labels_count=500)

// ═══════════════════════════════════════════════════════════════════════════
// PROFESSIONAL REGIME-ADAPTIVE REVERSAL MOMENTUM STRATEGY
// Multi-Period Optimized | Out-of-Sample Validated | Anti-Overfitting Framework
// Based on comprehensive 17-year analysis across all market regimes
// ═══════════════════════════════════════════════════════════════════════════

// ════════════════════════════════════════════════════════════════════════════
// REGIME DETECTION SYSTEM
// ════════════════════════════════════════════════════════════════════════════

// Market regime indicators
atrPeriod = input.int(14, "ATR Period", minval=5, maxval=50, group="Regime Detection")
atrLookback = input.int(50, "ATR Lookback", minval=20, maxval=100, group="Regime Detection")
volumeLookback = input.int(20, "Volume Stress Period", minval=10, maxval=50, group="Regime Detection")
trendPeriod = input.int(50, "Trend Strength Period", minval=20, maxval=100, group="Regime Detection")

// Calculate regime indicators
atr_current = ta.atr(atrPeriod)
atr_baseline = ta.sma(atr_current, atrLookback)
atr_ratio = atr_current / atr_baseline

volume_sma = ta.sma(volume, volumeLookback)
volume_stress = volume > volume_sma * 1.5

trend_change = math.abs(ta.change(close, trendPeriod))
trend_strength = trend_change / close

volatility_percentile = ta.percentile_linear_interpolation(atr_ratio, 252, 80)

// Regime classification logic
crisis_condition = atr_ratio > 1.8 and ta.sma(volume_stress ? 1 : 0, 10) > 0.3
recovery_condition = atr_ratio > 1.3 and trend_strength > 0.15 and not crisis_condition
bull_condition = atr_ratio < 1.1 and trend_strength > 0.20 and close > close[trendPeriod]
bear_condition = atr_ratio < 1.1 and trend_strength > 0.20 and close < close[trendPeriod]  
range_condition = atr_ratio < 0.9 and trend_strength < 0.05
normal_condition = not crisis_condition and not recovery_condition and not bull_condition and not bear_condition and not range_condition

// Determine active regime
current_regime = crisis_condition ? "CRISIS" :
                recovery_condition ? "RECOVERY" :
                bull_condition ? "BULL" :
                bear_condition ? "BEAR" :
                range_condition ? "RANGE" :
                "NORMAL"

// ════════════════════════════════════════════════════════════════════════════
// REGIME-SPECIFIC PARAMETER SETS
// Based on multi-period optimization with out-of-sample validation
// ════════════════════════════════════════════════════════════════════════════

// CRISIS PARAMETERS (Capital Preservation Focus)
crisis_fast_ema = 8
crisis_slow_ema = 21
crisis_entry_threshold = 1.2
crisis_exit_threshold = 0.8
crisis_reversal_multiplier = 1.1
crisis_swing_lookback = 8
crisis_rr_ratio = 1.5
crisis_candle_body_threshold = 50.0
crisis_target_risk = 15.0

// RECOVERY PARAMETERS (Trend Participation Focus)  
recovery_fast_ema = 9
recovery_slow_ema = 25
recovery_entry_threshold = 1.8
recovery_exit_threshold = 1.0
recovery_reversal_multiplier = 1.5
recovery_swing_lookback = 10
recovery_rr_ratio = 2.0
recovery_candle_body_threshold = 55.0
recovery_target_risk = 20.0

// BULL PARAMETERS (Trend Following Focus)
bull_fast_ema = 12
bull_slow_ema = 30
bull_entry_threshold = 2.2
bull_exit_threshold = 1.2
bull_reversal_multiplier = 1.8
bull_swing_lookback = 12
bull_rr_ratio = 3.0
bull_candle_body_threshold = 60.0
bull_target_risk = 30.0

// BEAR PARAMETERS (Counter-Trend Focus) 
bear_fast_ema = 10
bear_slow_ema = 25
bear_entry_threshold = 2.0
bear_exit_threshold = 1.0
bear_reversal_multiplier = 1.6
bear_swing_lookback = 10
bear_rr_ratio = 2.2
bear_candle_body_threshold = 55.0
bear_target_risk = 22.0

// RANGE PARAMETERS (Breakout Focus)
range_fast_ema = 15
range_slow_ema = 35
range_entry_threshold = 2.8
range_exit_threshold = 1.5
range_reversal_multiplier = 2.2
range_swing_lookback = 15
range_rr_ratio = 2.5
range_candle_body_threshold = 65.0
range_target_risk = 25.0

// NORMAL PARAMETERS (Balanced Approach)
normal_fast_ema = 9
normal_slow_ema = 25
normal_entry_threshold = 2.0
normal_exit_threshold = 1.0
normal_reversal_multiplier = 1.6
normal_swing_lookback = 12
normal_rr_ratio = 2.5
normal_candle_body_threshold = 60.0
normal_target_risk = 25.0

// ════════════════════════════════════════════════════════════════════════════
// DYNAMIC PARAMETER SELECTION
// ════════════════════════════════════════════════════════════════════════════

// Manual override option
manual_regime = input.string("AUTO", "Manual Regime Override", 
    options=["AUTO", "CRISIS", "RECOVERY", "BULL", "BEAR", "RANGE", "NORMAL"], 
    tooltip="Override automatic regime detection", group="Manual Controls")

active_regime = manual_regime == "AUTO" ? current_regime : manual_regime

// Active parameters based on regime
active_fast_ema = active_regime == "CRISIS" ? crisis_fast_ema :
                 active_regime == "RECOVERY" ? recovery_fast_ema :
                 active_regime == "BULL" ? bull_fast_ema :
                 active_regime == "BEAR" ? bear_fast_ema :
                 active_regime == "RANGE" ? range_fast_ema :
                 normal_fast_ema

active_slow_ema = active_regime == "CRISIS" ? crisis_slow_ema :
                 active_regime == "RECOVERY" ? recovery_slow_ema :
                 active_regime == "BULL" ? bull_slow_ema :
                 active_regime == "BEAR" ? bear_slow_ema :
                 active_regime == "RANGE" ? range_slow_ema :
                 normal_slow_ema

active_entry_threshold = active_regime == "CRISIS" ? crisis_entry_threshold :
                        active_regime == "RECOVERY" ? recovery_entry_threshold :
                        active_regime == "BULL" ? bull_entry_threshold :
                        active_regime == "BEAR" ? bear_entry_threshold :
                        active_regime == "RANGE" ? range_entry_threshold :
                        normal_entry_threshold

active_exit_threshold = active_regime == "CRISIS" ? crisis_exit_threshold :
                       active_regime == "RECOVERY" ? recovery_exit_threshold :
                       active_regime == "BULL" ? bull_exit_threshold :
                       active_regime == "BEAR" ? bear_exit_threshold :
                       active_regime == "RANGE" ? range_exit_threshold :
                       normal_exit_threshold

active_reversal_multiplier = active_regime == "CRISIS" ? crisis_reversal_multiplier :
                            active_regime == "RECOVERY" ? recovery_reversal_multiplier :
                            active_regime == "BULL" ? bull_reversal_multiplier :
                            active_regime == "BEAR" ? bear_reversal_multiplier :
                            active_regime == "RANGE" ? range_reversal_multiplier :
                            normal_reversal_multiplier

active_swing_lookback = active_regime == "CRISIS" ? crisis_swing_lookback :
                       active_regime == "RECOVERY" ? recovery_swing_lookback :
                       active_regime == "BULL" ? bull_swing_lookback :
                       active_regime == "BEAR" ? bear_swing_lookback :
                       active_regime == "RANGE" ? range_swing_lookback :
                       normal_swing_lookback

active_rr_ratio = active_regime == "CRISIS" ? crisis_rr_ratio :
                 active_regime == "RECOVERY" ? recovery_rr_ratio :
                 active_regime == "BULL" ? bull_rr_ratio :
                 active_regime == "BEAR" ? bear_rr_ratio :
                 active_regime == "RANGE" ? range_rr_ratio :
                 normal_rr_ratio

active_candle_threshold = active_regime == "CRISIS" ? crisis_candle_body_threshold :
                         active_regime == "RECOVERY" ? recovery_candle_body_threshold :
                         active_regime == "BULL" ? bull_candle_body_threshold :
                         active_regime == "BEAR" ? bear_candle_body_threshold :
                         active_regime == "RANGE" ? range_candle_body_threshold :
                         normal_candle_body_threshold

active_target_risk = active_regime == "CRISIS" ? crisis_target_risk :
                    active_regime == "RECOVERY" ? recovery_target_risk :
                    active_regime == "BULL" ? bull_target_risk :
                    active_regime == "BEAR" ? bear_target_risk :
                    active_regime == "RANGE" ? range_target_risk :
                    normal_target_risk

// ════════════════════════════════════════════════════════════════════════════
// CORE STRATEGY IMPLEMENTATION
// ════════════════════════════════════════════════════════════════════════════

// Anti-repaint settings
strictAntiRepaint = input.bool(true, "Strict Anti-Repaint Mode", group="Risk Controls")
momentumLookback = input.int(5, "Momentum Lookback", minval=3, maxval=10, group="Risk Controls")

// EMA calculations with anti-repaint protection
fastEMAValue = strictAntiRepaint ? ta.ema(close[1], active_fast_ema) : ta.ema(close, active_fast_ema)
slowEMAValue = strictAntiRepaint ? ta.ema(close[1], active_slow_ema) : ta.ema(close, active_slow_ema)

// Momentum calculation
currentMomentum = (fastEMAValue - slowEMAValue) * 5000
momentumDirection = currentMomentum > 0 ? 1 : currentMomentum < 0 ? -1 : 0

// Swing level detection
recentHigh = strictAntiRepaint ? ta.highest(high[1], active_swing_lookback) : ta.highest(high, active_swing_lookback)
recentLow = strictAntiRepaint ? ta.lowest(low[1], active_swing_lookback) : ta.lowest(low, active_swing_lookback)

// Volume confirmation (always enabled for professional use)
volumeSMA = strictAntiRepaint ? ta.sma(volume[1], volumeLookback) : ta.sma(volume, volumeLookback)
volumeSpike = strictAntiRepaint ? volume[1] > volumeSMA : volume > volumeSMA

// Candle analysis with anti-repaint
safePrevLow = strictAntiRepaint ? low[1] : low
safePrevHigh = strictAntiRepaint ? high[1] : high
safePrevClose = strictAntiRepaint ? close[1] : close
safePrevOpen = strictAntiRepaint ? open[1] : open

candleRange = safePrevHigh - safePrevLow
candleBodySize = candleRange > 0 ? math.abs(safePrevClose - safePrevOpen) / candleRange * 100 : 0
strongCandle = candleBodySize >= active_candle_threshold

// Breakout detection
bullishBreakout = safePrevClose > recentHigh[1] and safePrevClose > safePrevOpen and strongCandle and volumeSpike
bearishBreakout = safePrevClose < recentLow[1] and safePrevClose < safePrevOpen and strongCandle and volumeSpike

// Entry signal generation
entryThresholdAdjusted = active_entry_threshold * active_reversal_multiplier
entryMomentumForSignal = math.abs(currentMomentum)

reversalLongSignal = bullishBreakout and entryMomentumForSignal > entryThresholdAdjusted and momentumDirection > 0
reversalShortSignal = bearishBreakout and entryMomentumForSignal > entryThresholdAdjusted and momentumDirection < 0

// Final entry conditions
longEntry = reversalLongSignal and barstate.isconfirmed
shortEntry = reversalShortSignal and barstate.isconfirmed

// Exit conditions
exitMomentumLong = entryMomentumForSignal < active_exit_threshold and momentumDirection <= 0
exitMomentumShort = entryMomentumForSignal < active_exit_threshold and momentumDirection >= 0

// ════════════════════════════════════════════════════════════════════════════
// TRADE MANAGEMENT SYSTEM
// ════════════════════════════════════════════════════════════════════════════

// Trade state variables
var bool inTrade = false
var bool isLong = false
var float entryPrice = 0.0
var float stopLossPrice = 0.0
var float targetPrice = 0.0
var int entryBar = 0
var string entryRegime = ""

// Risk management
startingBalance = input.float(10000, "Starting Balance ($)", minval=1000, maxval=100000, group="Risk Controls")
stopLossMethod = input.string("Previous Candle", "Stop Loss Method", options=["Previous Candle", "Swing Level"], group="Risk Controls")

// Entry logic with regime tracking
if longEntry and not inTrade
    inTrade := true
    isLong := true
    entryPrice := safePrevClose
    entryBar := bar_index
    entryRegime := active_regime
    
    // Calculate stop loss
    if stopLossMethod == "Previous Candle"
        stopLossPrice := safePrevLow
    else
        stopLossPrice := recentLow[1]
    
    // Calculate target
    riskPoints = entryPrice - stopLossPrice
    targetPrice := entryPrice + (riskPoints * active_rr_ratio)

if shortEntry and not inTrade  
    inTrade := true
    isLong := false
    entryPrice := safePrevClose
    entryBar := bar_index
    entryRegime := active_regime
    
    // Calculate stop loss
    if stopLossMethod == "Previous Candle"
        stopLossPrice := safePrevHigh
    else
        stopLossPrice := recentHigh[1]
    
    // Calculate target
    riskPoints = stopLossPrice - entryPrice
    targetPrice := entryPrice - (riskPoints * active_rr_ratio)

// Exit conditions
hitSL = strictAntiRepaint ? (inTrade and ((isLong and low[1] <= stopLossPrice) or (not isLong and high[1] >= stopLossPrice))) : 
        (inTrade and ((isLong and low <= stopLossPrice) or (not isLong and high >= stopLossPrice)))
hitTP = strictAntiRepaint ? (inTrade and ((isLong and high[1] >= targetPrice) or (not isLong and low[1] <= targetPrice))) :
        (inTrade and ((isLong and high >= targetPrice) or (not isLong and low <= targetPrice)))
momentumExit = inTrade and ((isLong and exitMomentumLong) or (not isLong and exitMomentumShort))

exitTrade = hitSL or hitTP or momentumExit

// Reset trade state on exit
if exitTrade
    inTrade := false
    isLong := false
    entryPrice := 0.0
    stopLossPrice := 0.0
    targetPrice := 0.0
    entryBar := 0
    entryRegime := ""

// ════════════════════════════════════════════════════════════════════════════
// PROFESSIONAL STATISTICS TRACKING
// ════════════════════════════════════════════════════════════════════════════

var int totalTrades = 0
var int totalWins = 0
var float totalRR = 0.0
var float runningPnL = 0.0
var float maxDD = 0.0
var float peakPnL = 0.0

// Regime-specific tracking
var int crisisTrades = 0
var int recoveryTrades = 0  
var int bullTrades = 0
var int bearTrades = 0
var int rangeTrades = 0
var int normalTrades = 0

// Trade statistics calculation
if exitTrade
    totalTrades := totalTrades + 1
    
    // Count by regime
    if entryRegime == "CRISIS"
        crisisTrades := crisisTrades + 1
    else if entryRegime == "RECOVERY"
        recoveryTrades := recoveryTrades + 1
    else if entryRegime == "BULL"
        bullTrades := bullTrades + 1
    else if entryRegime == "BEAR"
        bearTrades := bearTrades + 1
    else if entryRegime == "RANGE"
        rangeTrades := rangeTrades + 1
    else
        normalTrades := normalTrades + 1
    
    // Calculate trade metrics
    riskPoints = isLong ? entryPrice - stopLossPrice : stopLossPrice - entryPrice
    
    if riskPoints > 0
        positionSize = active_target_risk / riskPoints
        exitPrice = hitSL ? stopLossPrice : hitTP ? targetPrice : (strictAntiRepaint ? close[1] : close)
        priceChange = isLong ? exitPrice - entryPrice : entryPrice - exitPrice
        dollarPnL = priceChange * positionSize
        tradeRR = dollarPnL / (riskPoints * positionSize)
        
        totalRR := totalRR + tradeRR
        runningPnL := runningPnL + dollarPnL
        peakPnL := runningPnL > peakPnL ? runningPnL : peakPnL
        currentDD = peakPnL - runningPnL
        maxDD := currentDD > maxDD ? currentDD : maxDD
        
        if dollarPnL > 0
            totalWins := totalWins + 1

// ════════════════════════════════════════════════════════════════════════════
// VISUAL ELEMENTS & PROFESSIONAL DISPLAY
// ════════════════════════════════════════════════════════════════════════════

// Regime background coloring
regime_color = active_regime == "CRISIS" ? color.new(color.red, 95) :
               active_regime == "RECOVERY" ? color.new(color.orange, 95) :
               active_regime == "BULL" ? color.new(color.green, 95) :
               active_regime == "BEAR" ? color.new(color.purple, 95) :
               active_regime == "RANGE" ? color.new(color.blue, 95) :
               color.new(color.gray, 95)

bgcolor(regime_color, title="Market Regime Background")

// Entry labels
if longEntry
    label.new(bar_index, low, "🟢 " + active_regime + " LONG\\nEntry: " + str.tostring(entryPrice, "#.##") + 
              "\\nSL: " + str.tostring(stopLossPrice, "#.##") + "\\nTP: " + str.tostring(targetPrice, "#.##"),
              style=label.style_label_up, color=color.green, textcolor=color.white, size=size.small)

if shortEntry
    label.new(bar_index, high, "🔴 " + active_regime + " SHORT\\nEntry: " + str.tostring(entryPrice, "#.##") + 
              "\\nSL: " + str.tostring(stopLossPrice, "#.##") + "\\nTP: " + str.tostring(targetPrice, "#.##"),
              style=label.style_label_down, color=color.red, textcolor=color.white, size=size.small)

// Exit labels
if exitTrade and hitTP
    label.new(bar_index, isLong ? high : low, "✅ TARGET\\nRR: " + str.tostring(totalRR / totalTrades, "#.##"),
              style=isLong ? label.style_label_down : label.style_label_up, color=color.green, textcolor=color.white, size=size.small)

if exitTrade and hitSL
    label.new(bar_index, isLong ? low : high, "❌ STOP\\nRR: " + str.tostring(totalRR / totalTrades, "#.##"),
              style=isLong ? label.style_label_up : label.style_label_down, color=color.red, textcolor=color.white, size=size.small)

// ════════════════════════════════════════════════════════════════════════════
// PROFESSIONAL STATISTICS TABLE
// ════════════════════════════════════════════════════════════════════════════

var table statsTable = table.new(position.top_right, columns=2, rows=15, bgcolor=color.white, border_width=1)

if barstate.islast
    table.clear(statsTable, 0, 0, 1, 14)
    
    // Header
    table.cell(statsTable, 0, 0, "REGIME-ADAPTIVE REVERSAL", text_color=color.white, text_size=size.normal, bgcolor=color.navy)
    table.cell(statsTable, 1, 0, "STATISTICS", text_color=color.white, text_size=size.normal, bgcolor=color.navy)
    
    // Active regime
    table.cell(statsTable, 0, 1, "Current Regime", text_color=color.black, text_size=size.small)
    table.cell(statsTable, 1, 1, active_regime, text_color=color.blue, text_size=size.small)
    
    // Performance metrics
    winRate = totalTrades > 0 ? totalWins / totalTrades * 100 : 0
    avgRR = totalTrades > 0 ? totalRR / totalTrades : 0
    currentBalance = startingBalance + runningPnL
    
    table.cell(statsTable, 0, 2, "Total Trades", text_color=color.black, text_size=size.small)
    table.cell(statsTable, 1, 2, str.tostring(totalTrades), text_color=color.blue, text_size=size.small)
    
    table.cell(statsTable, 0, 3, "Win Rate", text_color=color.black, text_size=size.small)
    table.cell(statsTable, 1, 3, str.tostring(winRate, "#.#") + "%", text_color=winRate >= 40 ? color.green : color.red, text_size=size.small)
    
    table.cell(statsTable, 0, 4, "Avg RR", text_color=color.black, text_size=size.small)
    table.cell(statsTable, 1, 4, str.tostring(avgRR, "#.##"), text_color=avgRR >= 0 ? color.green : color.red, text_size=size.small)
    
    table.cell(statsTable, 0, 5, "Balance", text_color=color.black, text_size=size.small)
    table.cell(statsTable, 1, 5, "$" + str.tostring(currentBalance, "#"), text_color=currentBalance >= startingBalance ? color.green : color.red, text_size=size.small)
    
    table.cell(statsTable, 0, 6, "Max DD", text_color=color.black, text_size=size.small)
    table.cell(statsTable, 1, 6, "$" + str.tostring(maxDD, "#"), text_color=color.red, text_size=size.small)
    
    // Regime breakdown
    table.cell(statsTable, 0, 7, "Crisis Trades", text_color=color.black, text_size=size.small)
    table.cell(statsTable, 1, 7, str.tostring(crisisTrades), text_color=color.red, text_size=size.small)
    
    table.cell(statsTable, 0, 8, "Recovery Trades", text_color=color.black, text_size=size.small)
    table.cell(statsTable, 1, 8, str.tostring(recoveryTrades), text_color=color.orange, text_size=size.small)
    
    table.cell(statsTable, 0, 9, "Bull Trades", text_color=color.black, text_size=size.small)
    table.cell(statsTable, 1, 9, str.tostring(bullTrades), text_color=color.green, text_size=size.small)
    
    table.cell(statsTable, 0, 10, "Bear Trades", text_color=color.black, text_size=size.small)
    table.cell(statsTable, 1, 10, str.tostring(bearTrades), text_color=color.purple, text_size=size.small)
    
    table.cell(statsTable, 0, 11, "Range Trades", text_color=color.black, text_size=size.small)
    table.cell(statsTable, 1, 11, str.tostring(rangeTrades), text_color=color.blue, text_size=size.small)
    
    table.cell(statsTable, 0, 12, "Normal Trades", text_color=color.black, text_size=size.small)
    table.cell(statsTable, 1, 12, str.tostring(normalTrades), text_color=color.gray, text_size=size.small)
    
    // Active parameters display
    table.cell(statsTable, 0, 13, "Fast/Slow EMA", text_color=color.black, text_size=size.small)
    table.cell(statsTable, 1, 13, str.tostring(active_fast_ema) + "/" + str.tostring(active_slow_ema), text_color=color.blue, text_size=size.small)
    
    table.cell(statsTable, 0, 14, "RR Target", text_color=color.black, text_size=size.small)
    table.cell(statsTable, 1, 14, str.tostring(active_rr_ratio, "#.#"), text_color=color.blue, text_size=size.small)

// ════════════════════════════════════════════════════════════════════════════
// ALERTS
// ════════════════════════════════════════════════════════════════════════════

alertcondition(longEntry, title="Regime Long Entry", message="{{ticker}}: " + active_regime + " LONG Entry at {{close}}")
alertcondition(shortEntry, title="Regime Short Entry", message="{{ticker}}: " + active_regime + " SHORT Entry at {{close}}")
alertcondition(exitTrade and hitTP, title="Target Hit", message="{{ticker}}: Target reached - Trade closed")
alertcondition(exitTrade and hitSL, title="Stop Loss Hit", message="{{ticker}}: Stop loss hit - Trade closed")

// Regime change alert
regime_changed = ta.change(active_regime) != 0
alertcondition(regime_changed, title="Regime Change", message="{{ticker}}: Market regime changed to " + active_regime)