//@version=5
indicator("True Reversal Detector V5", shorttitle="TRD_V5", overlay=true, max_boxes_count=50, max_lines_count=50, max_labels_count=50)

// === PARAMETERS ===

// Reversal Detection
minPointChange = input.float(1.5, "Minimum Point Change", minval=0.5, maxval=5.0, step=0.1, group="Reversal Pattern")
engulfBars = input.int(3, "Bars to Engulf", minval=2, maxval=5, group="Reversal Pattern")
volumeMultiplier = input.float(2.0, "Volume Multiplier (vs 20MA)", minval=1.5, maxval=3.0, step=0.1, group="Reversal Pattern")

// Risk Management
stopLossPct = input.float(0.8, "Stop Loss %", minval=0.5, maxval=2.0, step=0.1, group="Risk Management")
riskRewardRatio = input.float(3.0, "Risk:Reward Ratio", minval=2.0, maxval=5.0, step=0.5, group="Risk Management")
riskPerTrade = input.float(2.0, "Risk Per Trade %", minval=1.0, maxval=3.0, step=0.1, group="Risk Management")

// Trade Management
maxConcurrentTrades = input.int(1, "Max Concurrent Trades", minval=1, maxval=2, group="Risk Management")
cooldownBars = input.int(10, "Cooldown Between Signals", minval=5, maxval=30, group="Risk Management")

// Display
showVolumeInfo = input.bool(true, "Show Volume Info", group="Display")
showPatternInfo = input.bool(true, "Show Pattern Details", group="Display")

// === REVERSAL PATTERN DETECTION ===

// Volume analysis
volume20MA = ta.sma(volume, 20)
volumeSpike = volume >= volume20MA * volumeMultiplier

// Current candle size and direction
candleSize = high - low
candleChange = close - open
isBullishCandle = close > open
isBearishCandle = close < open

// Check if current candle engulfs the specified number of previous bars
engulfsBullish = true
engulfsBearish = true

// For bullish engulfing (current candle low below all previous lows, high above all previous highs)
for i = 1 to engulfBars
    if low >= low[i] or high <= high[i]
        engulfsBullish := false

// For bearish engulfing (current candle high above all previous highs, low below all previous lows)  
for i = 1 to engulfBars
    if high <= high[i] or low >= low[i]
        engulfsBearish := false

// Significant point change requirement
significantChange = math.abs(candleChange) >= minPointChange

// === REVERSAL SIGNAL CONDITIONS ===

// Bullish reversal (long signal)
bullishReversal = isBullishCandle and engulfsBullish and volumeSpike and significantChange and candleChange >= minPointChange

// Bearish reversal (short signal) 
bearishReversal = isBearishCandle and engulfsBearish and volumeSpike and significantChange and candleChange <= -minPointChange

// === TRADE STATE MANAGEMENT ===

var float entryPrice = na
var float stopPrice = na
var float targetPrice = na
var bool inTrade = false
var string tradeDirection = ""
var int entryBar = na
var int lastSignalBar = na

// Cooldown check
cooldownOK = na(lastSignalBar) or (bar_index - lastSignalBar) >= cooldownBars

// Entry conditions
canEnter = not inTrade and cooldownOK and maxConcurrentTrades > 0

// === ENTRY LOGIC ===

if bullishReversal and canEnter
    entryPrice := close
    stopPrice := entryPrice * (1 - stopLossPct / 100)
    targetPrice := entryPrice * (1 + (stopLossPct / 100) * riskRewardRatio)
    inTrade := true
    tradeDirection := "LONG"
    entryBar := bar_index
    lastSignalBar := bar_index
    
    // Entry label with pattern details
    labelText = "🔄 REVERSAL LONG\n" + str.tostring(entryPrice, "#.##")
    if showPatternInfo
        labelText := labelText + "\nΔ" + str.tostring(candleChange, "#.#") + " pts"
        labelText := labelText + "\nVol: " + str.tostring(volume/volume20MA, "#.#") + "x"
    
    label.new(bar_index, low, labelText, 
             color=color.new(color.green, 10), style=label.style_label_up, 
             size=size.normal, textcolor=color.white)

if bearishReversal and canEnter
    entryPrice := close
    stopPrice := entryPrice * (1 + stopLossPct / 100)
    targetPrice := entryPrice * (1 - (stopLossPct / 100) * riskRewardRatio)
    inTrade := true
    tradeDirection := "SHORT"
    entryBar := bar_index
    lastSignalBar := bar_index
    
    // Entry label with pattern details
    labelText = "🔄 REVERSAL SHORT\n" + str.tostring(entryPrice, "#.##")
    if showPatternInfo
        labelText := labelText + "\nΔ" + str.tostring(candleChange, "#.#") + " pts"
        labelText := labelText + "\nVol: " + str.tostring(volume/volume20MA, "#.#") + "x"
    
    label.new(bar_index, high, labelText, 
             color=color.new(color.red, 10), style=label.style_label_down, 
             size=size.normal, textcolor=color.white)

// === EXIT LOGIC ===

var string exitReason = ""
var float exitPrice = 0.0

if inTrade
    if tradeDirection == "LONG"
        if low <= stopPrice
            exitReason := "STOP"
            exitPrice := stopPrice
            inTrade := false
        else if high >= targetPrice
            exitReason := "TARGET"
            exitPrice := targetPrice
            inTrade := false
    
    else if tradeDirection == "SHORT"
        if high >= stopPrice
            exitReason := "STOP"
            exitPrice := stopPrice
            inTrade := false
        else if low <= targetPrice
            exitReason := "TARGET"
            exitPrice := targetPrice
            inTrade := false

// === PERFORMANCE TRACKING ===

var int totalTrades = 0
var int winningTrades = 0
var float totalPnL = 0.0

if exitReason != ""
    totalTrades += 1
    
    // Calculate position size based on risk
    riskAmount = 10000 * (riskPerTrade / 100)
    stopDistance = math.abs(entryPrice - stopPrice)
    positionSize = riskAmount / stopDistance
    
    // Calculate P&L
    var float pnl = 0.0
    if tradeDirection == "LONG"
        pnl := (exitPrice - entryPrice) * positionSize
    else
        pnl := (entryPrice - exitPrice) * positionSize
    
    totalPnL += pnl
    
    if pnl > 0
        winningTrades += 1
    
    // Calculate RR achieved
    rrAchieved = exitReason == "TARGET" ? riskRewardRatio : -1.0
    
    // Exit label
    isWin = exitReason == "TARGET"
    labelColor = isWin ? color.new(color.lime, 10) : color.new(color.maroon, 10)
    exitText = (isWin ? "✅ 3RR " : "❌ SL ") + exitReason
    exitText := exitText + "\n$" + str.tostring(pnl, "#")
    
    label.new(bar_index, isWin ? high : low, exitText, 
             color=labelColor, style=label.style_label_down, 
             size=size.normal, textcolor=color.white)
    
    // Trade box (red bottom to green top like your chart)
    if not na(entryBar) and isWin
        // Winning trade: red (SL level) to green (TP level) box
        box.new(entryBar, targetPrice, bar_index, stopPrice, 
                bgcolor=color.new(color.green, 85), border_color=color.green, border_width=2)
        // Entry line
        line.new(entryBar, entryPrice, bar_index, entryPrice, 
                color=color.white, width=2, style=line.style_solid)
    else if not na(entryBar) and not isWin
        // Losing trade: red box only (entry to stop)
        if tradeDirection == "LONG"
            box.new(entryBar, entryPrice, bar_index, stopPrice, 
                    bgcolor=color.new(color.red, 85), border_color=color.red, border_width=2)
        else
            box.new(entryBar, stopPrice, bar_index, entryPrice, 
                    bgcolor=color.new(color.red, 85), border_color=color.red, border_width=2)
    
    // Reset for next trade
    exitReason := ""
    tradeDirection := ""
    entryBar := na

// === DISPLAY ELEMENTS ===

// Active trade levels
plot(inTrade ? entryPrice : na, "Entry", color=color.white, linewidth=3, style=plot.style_circles)
plot(inTrade ? stopPrice : na, "Stop Loss", color=color.red, linewidth=2, style=plot.style_cross)
plot(inTrade ? targetPrice : na, "Take Profit (3RR)", color=color.lime, linewidth=2, style=plot.style_cross)

// Volume indicator (optional)
plot(showVolumeInfo ? volume20MA * volumeMultiplier : na, "Volume Threshold", color=color.new(color.orange, 70), linewidth=1)

// Background for reversal signals
bgcolor(bullishReversal ? color.new(color.green, 95) : bearishReversal ? color.new(color.red, 95) : na, title="Reversal Signal")

// === STATISTICS TABLE ===

if barstate.islast
    var table statsTable = table.new(position.top_right, 2, 7, bgcolor=color.new(color.white, 10), border_width=1)
    
    // Header
    table.cell(statsTable, 0, 0, "REVERSAL STATS", text_color=color.black, bgcolor=color.new(color.gray, 30))
    table.cell(statsTable, 1, 0, "VALUE", text_color=color.black, bgcolor=color.new(color.gray, 30))
    
    // Performance metrics
    table.cell(statsTable, 0, 1, "Total Trades", text_color=color.black)
    table.cell(statsTable, 1, 1, str.tostring(totalTrades), text_color=color.black)
    
    winRate = totalTrades > 0 ? winningTrades / totalTrades * 100 : 0
    table.cell(statsTable, 0, 2, "Win Rate", text_color=color.black)
    table.cell(statsTable, 1, 2, str.tostring(winRate, "#") + "%", text_color=winRate >= 40 ? color.green : color.red)
    
    avgPnL = totalTrades > 0 ? totalPnL / totalTrades : 0
    table.cell(statsTable, 0, 3, "Avg P&L", text_color=color.black)
    table.cell(statsTable, 1, 3, "$" + str.tostring(avgPnL, "#"), text_color=avgPnL > 0 ? color.green : color.red)
    
    table.cell(statsTable, 0, 4, "Total P&L", text_color=color.black)
    table.cell(statsTable, 1, 4, "$" + str.tostring(totalPnL, "#"), text_color=totalPnL > 0 ? color.green : color.red)
    
    table.cell(statsTable, 0, 5, "3RR Hits", text_color=color.black)
    table.cell(statsTable, 1, 5, str.tostring(winningTrades), text_color=winningTrades > 0 ? color.green : color.gray)
    
    // Current trade status
    table.cell(statsTable, 0, 6, "Active Trade", text_color=color.black)
    activeText = inTrade ? (tradeDirection == "LONG" ? "🔄 LONG" : "🔄 SHORT") : "None"
    table.cell(statsTable, 1, 6, activeText, text_color=inTrade ? color.blue : color.gray)

// === ALERTS ===

alertcondition(bullishReversal, title="Bullish Reversal", message="Strong bullish reversal pattern detected - Long setup")
alertcondition(bearishReversal, title="Bearish Reversal", message="Strong bearish reversal pattern detected - Short setup") 
alertcondition(exitReason == "TARGET", title="3RR Target Hit", message="Reversal trade hit 3RR target!")
alertcondition(exitReason == "STOP", title="Stop Loss Hit", message="Reversal trade stopped out")