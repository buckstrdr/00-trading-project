//@version=5
indicator("Clean Breakout V4", shorttitle="CB_V4", overlay=true, max_boxes_count=50, max_lines_count=50, max_labels_count=50)

// === PARAMETERS ===

// Swing Detection (Higher quality breakouts)
swingLookback = input.int(12, "Swing Lookback", minval=8, maxval=20, group="Signal Detection")

// Momentum (More selective)
fastEMA = input.int(8, "Fast EMA", minval=5, maxval=12, group="Signal Detection")
slowEMA = input.int(21, "Slow EMA", minval=15, maxval=30, group="Signal Detection")
momentumThreshold = input.float(0.05, "Momentum Threshold %", minval=0.02, maxval=0.15, step=0.01, group="Signal Detection")

// Quality Filters (Key for clean signals)
rangeMultiplier = input.float(1.5, "Range Expansion", minval=1.2, maxval=2.0, step=0.1, group="Quality Filters")
volumeMultiplier = input.float(1.3, "Volume Spike", minval=1.1, maxval=2.0, step=0.1, group="Quality Filters")
minBreakoutGap = input.float(0.02, "Min Breakout Gap %", minval=0.01, maxval=0.05, step=0.01, group="Quality Filters")

// Risk Management
stopLossPct = input.float(0.8, "Stop Loss %", minval=0.5, maxval=1.5, step=0.1, group="Risk Management")
riskRewardRatio = input.float(3.0, "Risk:Reward Ratio", minval=2.0, maxval=5.0, step=0.5, group="Risk Management")

// Trade Management
maxConcurrentTrades = input.int(1, "Max Concurrent Trades", minval=1, maxval=3, group="Risk Management")
cooldownBars = input.int(20, "Cooldown Between Signals", minval=10, maxval=50, group="Risk Management")

// Display
showSwingLevels = input.bool(false, "Show Swing Levels", group="Display")
showEMAs = input.bool(true, "Show EMAs", group="Display")

// === CALCULATIONS ===

// EMAs and Momentum
emaFast = ta.ema(close, fastEMA)
emaSlow = ta.ema(close, slowEMA)
momentum = (emaFast - emaSlow) / emaSlow * 100

// Swing Levels
swingHigh = ta.highest(high, swingLookback)
swingLow = ta.lowest(low, swingLookback)

// Quality Filters
currentRange = high - low
avgRange = ta.sma(currentRange, 20)
rangeExpansion = currentRange > avgRange * rangeMultiplier

avgVolume = ta.sma(volume, 20)
volumeSpike = volume > avgVolume * volumeMultiplier

// Breakout gap (ensuring significant breakout)
longBreakoutGap = close > swingHigh[1] * (1 + minBreakoutGap / 100)
shortBreakoutGap = close < swingLow[1] * (1 - minBreakoutGap / 100)

// === SIGNAL CONDITIONS ===

// High-quality breakout conditions
longBreakout = longBreakoutGap and close > open
shortBreakout = shortBreakoutGap and close < open

// Strong momentum confirmation
strongMomentumUp = momentum > momentumThreshold
strongMomentumDown = momentum < -momentumThreshold

// Combined quality signal
longSignal = longBreakout and strongMomentumUp and rangeExpansion and volumeSpike
shortSignal = shortBreakout and strongMomentumDown and rangeExpansion and volumeSpike

// === TRADE STATE MANAGEMENT ===

var float entryPrice = na
var float stopPrice = na
var float targetPrice = na
var bool inTrade = false
var string tradeDirection = ""
var int entryBar = na
var int lastSignalBar = na

// Cooldown check
cooldownOK = na(lastSignalBar) or (bar_index - lastSignalBar) >= cooldownBars

// Entry conditions
canEnter = not inTrade and cooldownOK and maxConcurrentTrades > 0

// === ENTRY LOGIC ===

if longSignal and canEnter
    entryPrice := close
    stopPrice := entryPrice * (1 - stopLossPct / 100)
    targetPrice := entryPrice * (1 + (stopLossPct / 100) * riskRewardRatio)
    inTrade := true
    tradeDirection := "LONG"
    entryBar := bar_index
    lastSignalBar := bar_index
    
    // Clean entry label
    label.new(bar_index, low, "üöÄ LONG\n" + str.tostring(entryPrice, "#.##"), 
             color=color.new(color.green, 20), style=label.style_label_up, 
             size=size.normal, textcolor=color.white)

if shortSignal and canEnter
    entryPrice := close
    stopPrice := entryPrice * (1 + stopLossPct / 100)
    targetPrice := entryPrice * (1 - (stopLossPct / 100) * riskRewardRatio)
    inTrade := true
    tradeDirection := "SHORT"
    entryBar := bar_index
    lastSignalBar := bar_index
    
    // Clean entry label
    label.new(bar_index, high, "üéØ SHORT\n" + str.tostring(entryPrice, "#.##"), 
             color=color.new(color.red, 20), style=label.style_label_down, 
             size=size.normal, textcolor=color.white)

// === EXIT LOGIC ===

var string exitReason = ""
var float exitPrice = 0.0

if inTrade
    if tradeDirection == "LONG"
        if low <= stopPrice
            exitReason := "STOP"
            exitPrice := stopPrice
            inTrade := false
        else if high >= targetPrice
            exitReason := "TARGET"
            exitPrice := targetPrice
            inTrade := false
    
    else if tradeDirection == "SHORT"
        if high >= stopPrice
            exitReason := "STOP"
            exitPrice := stopPrice
            inTrade := false
        else if low <= targetPrice
            exitReason := "TARGET"
            exitPrice := targetPrice
            inTrade := false

// === PERFORMANCE TRACKING ===

var int totalTrades = 0
var int winningTrades = 0
var float totalPnL = 0.0

if exitReason != ""
    totalTrades += 1
    
    // Simple P&L calculation
    pnlPct = 0.0
    if tradeDirection == "LONG"
        pnlPct := (exitPrice - entryPrice) / entryPrice * 100
    else
        pnlPct := (entryPrice - exitPrice) / entryPrice * 100
    
    if pnlPct > 0
        winningTrades += 1
    
    totalPnL += pnlPct
    
    // Clean exit label
    isWin = exitReason == "TARGET"
    labelColor = isWin ? color.new(color.lime, 20) : color.new(color.red, 20)
    labelText = (isWin ? "‚úÖ " : "‚ùå ") + exitReason + "\nRR: " + str.tostring(isWin ? riskRewardRatio : -1.0, "#.#")
    
    label.new(bar_index, isWin ? high : low, labelText, 
             color=labelColor, style=label.style_label_down, 
             size=size.normal, textcolor=color.white)
    
    // Clean trade box
    if not na(entryBar)
        boxColor = isWin ? color.new(color.green, 90) : color.new(color.red, 90)
        borderColor = isWin ? color.green : color.red
        box.new(entryBar, math.max(entryPrice, exitPrice), bar_index, math.min(entryPrice, exitPrice), bgcolor=boxColor, border_color=borderColor, border_width=1)
    
    // Reset for next trade
    exitReason := ""
    tradeDirection := ""
    entryBar := na

// === DISPLAY ELEMENTS ===

// EMAs (optional)
plot(showEMAs ? emaFast : na, "Fast EMA", color=color.new(color.blue, 50), linewidth=1)
plot(showEMAs ? emaSlow : na, "Slow EMA", color=color.new(color.red, 50), linewidth=1)

// Swing levels (optional)
plot(showSwingLevels ? swingHigh : na, "Swing High", color=color.new(color.orange, 70), linewidth=1, style=plot.style_stepline)
plot(showSwingLevels ? swingLow : na, "Swing Low", color=color.new(color.orange, 70), linewidth=1, style=plot.style_stepline)

// Active trade levels
plot(inTrade ? entryPrice : na, "Entry", color=color.white, linewidth=2, style=plot.style_circles)
plot(inTrade ? stopPrice : na, "Stop Loss", color=color.red, linewidth=1, style=plot.style_cross)
plot(inTrade ? targetPrice : na, "Take Profit", color=color.lime, linewidth=1, style=plot.style_cross)

// Signal background (subtle)
bgcolor(longSignal ? color.new(color.green, 97) : shortSignal ? color.new(color.red, 97) : na)

// === CLEAN STATISTICS TABLE ===

if barstate.islast
    var table statsTable = table.new(position.top_right, 2, 6, bgcolor=color.new(color.white, 10), border_width=1)
    
    // Header
    table.cell(statsTable, 0, 0, "BREAKOUT STATS", text_color=color.black, bgcolor=color.new(color.gray, 30))
    table.cell(statsTable, 1, 0, "VALUE", text_color=color.black, bgcolor=color.new(color.gray, 30))
    
    // Stats
    table.cell(statsTable, 0, 1, "Total Trades", text_color=color.black)
    table.cell(statsTable, 1, 1, str.tostring(totalTrades), text_color=color.black)
    
    winRate = totalTrades > 0 ? winningTrades / totalTrades * 100 : 0
    table.cell(statsTable, 0, 2, "Win Rate", text_color=color.black)
    table.cell(statsTable, 1, 2, str.tostring(winRate, "#") + "%", text_color=winRate >= 40 ? color.green : color.red)
    
    table.cell(statsTable, 0, 3, "Total P&L", text_color=color.black)
    table.cell(statsTable, 1, 3, str.tostring(totalPnL, "#.#") + "%", text_color=totalPnL > 0 ? color.green : color.red)
    
    table.cell(statsTable, 0, 4, "Active Trade", text_color=color.black)
    activeText = inTrade ? (tradeDirection == "LONG" ? "üöÄ LONG" : "üéØ SHORT") : "None"
    table.cell(statsTable, 1, 4, activeText, text_color=inTrade ? color.blue : color.gray)
    
    // Assessment
    table.cell(statsTable, 0, 5, "Quality", text_color=color.black)
    if totalTrades >= 3 and winRate >= 50
        quality = "‚úÖ GOOD"
        qualityColor = color.green
    else if totalTrades >= 2 and winRate >= 33
        quality = "‚ö†Ô∏è OK"
        qualityColor = color.orange
    else if totalTrades > 0
        quality = "‚ùå POOR"
        qualityColor = color.red
    else
        quality = "üîç WAITING"
        qualityColor = color.blue
    
    table.cell(statsTable, 1, 5, quality, text_color=qualityColor)

// === ALERTS ===

alertcondition(longSignal, title="Long Breakout", message="High-quality long breakout signal")
alertcondition(shortSignal, title="Short Breakout", message="High-quality short breakout signal")
alertcondition(exitReason == "TARGET", title="Target Hit", message="3RR target achieved!")
alertcondition(exitReason == "STOP", title="Stop Hit", message="Stop loss triggered")